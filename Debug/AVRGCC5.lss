
AVRGCC5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000114  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000114  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000009f  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002d9  00000000  00000000  0000096f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001f7  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030b  00000000  00000000  00000e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  0000114c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000160  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006e  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000068  00000000  00000000  0000139a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	2b c0       	rjmp	.+86     	; 0x9c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:


bool is_button_pressed = false;

int main(void)
{
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
	led_config();
  4c:	17 d0       	rcall	.+46     	; 0x7c <led_config>
	button_config();
  4e:	07 d0       	rcall	.+14     	; 0x5e <button_config>
    while(1)
    {
		check_button_pin_status(&is_button_pressed);
  50:	c0 e6       	ldi	r28, 0x60	; 96
  52:	d0 e0       	ldi	r29, 0x00	; 0
  54:	ce 01       	movw	r24, r28
  56:	06 d0       	rcall	.+12     	; 0x64 <check_button_pin_status>
		led_func(&is_button_pressed);
  58:	ce 01       	movw	r24, r28
  5a:	17 d0       	rcall	.+46     	; 0x8a <led_func>
  5c:	fb cf       	rjmp	.-10     	; 0x54 <main+0xc>

0000005e <button_config>:
#include <avr/io.h>
#include <avr/delay.h>

void button_config(void) 
{
	DDRD &= ~(1 << BUTTON_PIN);
  5e:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << BUTTON_PIN); 
  60:	92 9a       	sbi	0x12, 2	; 18
}
  62:	08 95       	ret

00000064 <check_button_pin_status>:

void check_button_pin_status(bool* is_button_pressed) 
{
	if (~PIND & (1 << BUTTON_PIN))
  64:	82 99       	sbic	0x10, 2	; 16
  66:	09 c0       	rjmp	.+18     	; 0x7a <check_button_pin_status+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  68:	e3 ed       	ldi	r30, 0xD3	; 211
  6a:	f0 e3       	ldi	r31, 0x30	; 48
  6c:	31 97       	sbiw	r30, 0x01	; 1
  6e:	f1 f7       	brne	.-4      	; 0x6c <check_button_pin_status+0x8>
  70:	00 c0       	rjmp	.+0      	; 0x72 <check_button_pin_status+0xe>
  72:	00 00       	nop
	{
		_delay_ms(50);
		*(is_button_pressed) = true;
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	fc 01       	movw	r30, r24
  78:	20 83       	st	Z, r18
  7a:	08 95       	ret

0000007c <led_config>:
{
	/*
	* DDRX |= (1 << PINX) - установка в логическую единицу pinMode(PINX, 1);
	* DDRX &= ~(1 << PINX) - сброс в 0 pinMode(PINX, 0);
	*/
	DDRC |= (1 << LED_PIN) | (1 << PC5);
  7c:	84 b3       	in	r24, 0x14	; 20
  7e:	82 62       	ori	r24, 0x22	; 34
  80:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1 << LED_PIN) | (1 << PC5));
  82:	85 b3       	in	r24, 0x15	; 21
  84:	8d 7d       	andi	r24, 0xDD	; 221
  86:	85 bb       	out	0x15, r24	; 21
}
  88:	08 95       	ret

0000008a <led_func>:

void led_func(bool* is_button_pressed) 
{
  8a:	fc 01       	movw	r30, r24
	
	if (*(is_button_pressed))
  8c:	80 81       	ld	r24, Z
  8e:	88 23       	and	r24, r24
  90:	19 f0       	breq	.+6      	; 0x98 <led_func+0xe>
	{
		PORTC |= (1 << LED_PIN);
  92:	a9 9a       	sbi	0x15, 1	; 21
		*(is_button_pressed) = false;
  94:	10 82       	st	Z, r1
  96:	08 95       	ret
	}
	else 
	{
		PORTC &= ~(1 << LED_PIN);
  98:	a9 98       	cbi	0x15, 1	; 21
  9a:	08 95       	ret

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>
