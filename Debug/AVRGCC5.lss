
AVRGCC5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000150  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000f3  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000389  00000000  00000000  00000a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000265  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a5  00000000  00000000  0000100d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000014b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000199  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006e  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000092  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	11 d0       	rcall	.+34     	; 0x66 <main>
  44:	49 c0       	rjmp	.+146    	; 0xd8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_2>:

bool is_button_pressed = false;
bool itr_is_button_pressed = false;

ISR(INT1_vect) 
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
	itr_is_button_pressed = true;
  54:	81 e0       	ldi	r24, 0x01	; 1
  56:	80 93 61 00 	sts	0x0061, r24
}
  5a:	8f 91       	pop	r24
  5c:	0f 90       	pop	r0
  5e:	0f be       	out	0x3f, r0	; 63
  60:	0f 90       	pop	r0
  62:	1f 90       	pop	r1
  64:	18 95       	reti

00000066 <main>:

int main(void)
{
	led_config();
  66:	28 d0       	rcall	.+80     	; 0xb8 <led_config>
	button_config();
  68:	0c d0       	rcall	.+24     	; 0x82 <button_config>
	external_intr_config();
  6a:	1a d0       	rcall	.+52     	; 0xa0 <external_intr_config>
	sei();
  6c:	78 94       	sei
    while(1)
    {
		if (itr_is_button_pressed)
  6e:	80 91 61 00 	lds	r24, 0x0061
  72:	88 23       	and	r24, r24
  74:	21 f0       	breq	.+8      	; 0x7e <main+0x18>
		{
			PORTC |= (1 << PC5);
  76:	ad 9a       	sbi	0x15, 5	; 21
			itr_is_button_pressed = false;
  78:	10 92 61 00 	sts	0x0061, r1
  7c:	f8 cf       	rjmp	.-16     	; 0x6e <main+0x8>
		}	
		else 
		{
			PORTC &= ~(1 << PC5);
  7e:	ad 98       	cbi	0x15, 5	; 21
  80:	f6 cf       	rjmp	.-20     	; 0x6e <main+0x8>

00000082 <button_config>:
#include <avr/io.h>
#include <avr/delay.h>

void button_config(void) 
{
	DDRD &= ~(1 << BUTTON_PIN);
  82:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << BUTTON_PIN); 
  84:	92 9a       	sbi	0x12, 2	; 18
}
  86:	08 95       	ret

00000088 <check_button_pin_status>:

void check_button_pin_status(bool* is_button_pressed) 
{
	if (~PIND & (1 << BUTTON_PIN))
  88:	82 99       	sbic	0x10, 2	; 16
  8a:	09 c0       	rjmp	.+18     	; 0x9e <check_button_pin_status+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	e3 ed       	ldi	r30, 0xD3	; 211
  8e:	f0 e3       	ldi	r31, 0x30	; 48
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <check_button_pin_status+0x8>
  94:	00 c0       	rjmp	.+0      	; 0x96 <check_button_pin_status+0xe>
  96:	00 00       	nop
	{
		_delay_ms(50);
		*(is_button_pressed) = true;
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
  9e:	08 95       	ret

000000a0 <external_intr_config>:
void external_intr_config(void) 
{
	/*
	* MCUCR - The MCU Control Register contains control bits for interrupt sense control
	*/
	MCUCR |= (1 << ISC11);
  a0:	85 b7       	in	r24, 0x35	; 53
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);
  a6:	85 b7       	in	r24, 0x35	; 53
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT1);
  ac:	8b b7       	in	r24, 0x3b	; 59
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	8b bf       	out	0x3b, r24	; 59
	DDRD &= ~(1 << PD3);
  b2:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1 << PD3);
  b4:	93 9a       	sbi	0x12, 3	; 18
  b6:	08 95       	ret

000000b8 <led_config>:
{
	/*
	* DDRX |= (1 << PINX) - установка в логическую единицу pinMode(PINX, 1);
	* DDRX &= ~(1 << PINX) - сброс в 0 pinMode(PINX, 0);
	*/
	DDRC |= (1 << LED_PIN) | (1 << PC5);
  b8:	84 b3       	in	r24, 0x14	; 20
  ba:	82 62       	ori	r24, 0x22	; 34
  bc:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~((1 << LED_PIN) | (1 << PC5));
  be:	85 b3       	in	r24, 0x15	; 21
  c0:	8d 7d       	andi	r24, 0xDD	; 221
  c2:	85 bb       	out	0x15, r24	; 21
}
  c4:	08 95       	ret

000000c6 <led_func>:

void led_func(bool* is_button_pressed) 
{
  c6:	fc 01       	movw	r30, r24
	if (*(is_button_pressed))
  c8:	80 81       	ld	r24, Z
  ca:	88 23       	and	r24, r24
  cc:	19 f0       	breq	.+6      	; 0xd4 <led_func+0xe>
	{
		PORTC |= (1 << LED_PIN);
  ce:	a9 9a       	sbi	0x15, 1	; 21
		*(is_button_pressed) = false;
  d0:	10 82       	st	Z, r1
  d2:	08 95       	ret
	}
	else 
	{
		PORTC &= ~(1 << LED_PIN);
  d4:	a9 98       	cbi	0x15, 1	; 21
  d6:	08 95       	ret

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
