
AVRGCC5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  0000020e  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000111  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002a2  00000000  00000000  00000add  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000016a  00000000  00000000  00000d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039c  00000000  00000000  00000ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b2  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000028  00000000  00000000  000014da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000081  00000000  00000000  00001502  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__vector_1>
   4:	30 c0       	rjmp	.+96     	; 0x66 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	aa 36       	cpi	r26, 0x6A	; 106
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	20 d0       	rcall	.+64     	; 0x84 <main>
  44:	a8 c0       	rjmp	.+336    	; 0x196 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_1>:

bool external_intr_zero_flag = false;
bool external_intr_one_flag = false;

ISR(INT0_vect) 
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
	external_intr_zero_flag = true;
  54:	81 e0       	ldi	r24, 0x01	; 1
  56:	80 93 68 00 	sts	0x0068, r24
}
  5a:	8f 91       	pop	r24
  5c:	0f 90       	pop	r0
  5e:	0f be       	out	0x3f, r0	; 63
  60:	0f 90       	pop	r0
  62:	1f 90       	pop	r1
  64:	18 95       	reti

00000066 <__vector_2>:

ISR(INT1_vect) 
{
  66:	1f 92       	push	r1
  68:	0f 92       	push	r0
  6a:	0f b6       	in	r0, 0x3f	; 63
  6c:	0f 92       	push	r0
  6e:	11 24       	eor	r1, r1
  70:	8f 93       	push	r24
	external_intr_one_flag = true;
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	80 93 69 00 	sts	0x0069, r24
}
  78:	8f 91       	pop	r24
  7a:	0f 90       	pop	r0
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	0f 90       	pop	r0
  80:	1f 90       	pop	r1
  82:	18 95       	reti

00000084 <main>:

int main(void)
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
	external_intr_config();
  88:	0d d0       	rcall	.+26     	; 0xa4 <external_intr_config>
	timer_counter_zero_config();
  8a:	23 d0       	rcall	.+70     	; 0xd2 <timer_counter_zero_config>
	timer_counter_one_config();
  8c:	29 d0       	rcall	.+82     	; 0xe0 <timer_counter_one_config>
	sei();
  8e:	78 94       	sei
	DDRB |= (1 << PB0);
  90:	b8 9a       	sbi	0x17, 0	; 23
	PORTB &= ~(1 << PB0);
  92:	c0 98       	cbi	0x18, 0	; 24
    while(1)
    {
		OCR1A = 0;
		PORTB &= ~(1 << PB0);
		count_ms_from_tc_zero(&ms_from_tc);
  94:	c0 e6       	ldi	r28, 0x60	; 96
  96:	d0 e0       	ldi	r29, 0x00	; 0
	sei();
	DDRB |= (1 << PB0);
	PORTB &= ~(1 << PB0);
    while(1)
    {
		OCR1A = 0;
  98:	1b bc       	out	0x2b, r1	; 43
  9a:	1a bc       	out	0x2a, r1	; 42
		PORTB &= ~(1 << PB0);
  9c:	c0 98       	cbi	0x18, 0	; 24
		count_ms_from_tc_zero(&ms_from_tc);
  9e:	ce 01       	movw	r24, r28
  a0:	29 d0       	rcall	.+82     	; 0xf4 <count_ms_from_tc_zero>
  a2:	fa cf       	rjmp	.-12     	; 0x98 <main+0x14>

000000a4 <external_intr_config>:
static void external_intr_zero_config(void) 
{
	/*
	* MCUCR - The MCU Control Register contains control bits for interrupt sense control
	*/
	MCUCR |= (1 << ISC01);
  a4:	85 b7       	in	r24, 0x35	; 53
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC00);
  aa:	85 b7       	in	r24, 0x35	; 53
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0);
  b0:	8b b7       	in	r24, 0x3b	; 59
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	8b bf       	out	0x3b, r24	; 59
	DDRD &= ~(1 << EXT_INTR_PIN_ZERO);
  b6:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << EXT_INTR_PIN_ZERO);
  b8:	92 9a       	sbi	0x12, 2	; 18
static void external_intr_one_config(void) 
{
	/*
	* MCUCR - The MCU Control Register contains control bits for interrupt sense control
	*/
	MCUCR |= (1 << ISC11);
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);
  c0:	85 b7       	in	r24, 0x35	; 53
  c2:	8b 7f       	andi	r24, 0xFB	; 251
  c4:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT1);
  c6:	8b b7       	in	r24, 0x3b	; 59
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	8b bf       	out	0x3b, r24	; 59
	DDRD &= ~(1 << EXT_INTR_PIN_ONE);
  cc:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1 << EXT_INTR_PIN_ONE);
  ce:	93 9a       	sbi	0x12, 3	; 18

void external_intr_config(void) 
{
	external_intr_zero_config();
	external_intr_one_config();
  d0:	08 95       	ret

000000d2 <timer_counter_zero_config>:
#include "timer_config.h"
#include <avr/io.h>

void timer_counter_zero_config(void) 
{
	TCCR0 |= (1 << CS02) | (1 << CS00);
  d2:	83 b7       	in	r24, 0x33	; 51
  d4:	85 60       	ori	r24, 0x05	; 5
  d6:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << CS01);
  d8:	83 b7       	in	r24, 0x33	; 51
  da:	8d 7f       	andi	r24, 0xFD	; 253
  dc:	83 bf       	out	0x33, r24	; 51
}
  de:	08 95       	ret

000000e0 <timer_counter_one_config>:

void timer_counter_one_config(void) 
{
	TCCR1A |= (1 << WGM11) | (1 << WGM10) | (1 << COM1A1);
  e0:	8f b5       	in	r24, 0x2f	; 47
  e2:	83 68       	ori	r24, 0x83	; 131
  e4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << CS11);
  e6:	8e b5       	in	r24, 0x2e	; 46
  e8:	8a 60       	ori	r24, 0x0A	; 10
  ea:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~((1 << WGM13) | (1 << CS12) | (1 << CS10));
  ec:	8e b5       	in	r24, 0x2e	; 46
  ee:	8a 7e       	andi	r24, 0xEA	; 234
  f0:	8e bd       	out	0x2e, r24	; 46
}
  f2:	08 95       	ret

000000f4 <count_ms_from_tc_zero>:

void count_ms_from_tc_zero(uint64_t* ms_from_tc) 
{
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	fc 01       	movw	r30, r24
	if (TCNT0 == 1)
  fa:	82 b7       	in	r24, 0x32	; 50
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	09 f0       	breq	.+2      	; 0x102 <count_ms_from_tc_zero+0xe>
 100:	47 c0       	rjmp	.+142    	; 0x190 <count_ms_from_tc_zero+0x9c>
	{
		(*ms_from_tc)++;
 102:	50 81       	ld	r21, Z
 104:	41 81       	ldd	r20, Z+1	; 0x01
 106:	32 81       	ldd	r19, Z+2	; 0x02
 108:	23 81       	ldd	r18, Z+3	; 0x03
 10a:	94 81       	ldd	r25, Z+4	; 0x04
 10c:	b5 81       	ldd	r27, Z+5	; 0x05
 10e:	a6 81       	ldd	r26, Z+6	; 0x06
 110:	17 81       	ldd	r17, Z+7	; 0x07
 112:	75 2f       	mov	r23, r21
 114:	7f 5f       	subi	r23, 0xFF	; 255
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	75 17       	cp	r23, r21
 11a:	08 f0       	brcs	.+2      	; 0x11e <count_ms_from_tc_zero+0x2a>
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	64 0f       	add	r22, r20
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	64 17       	cp	r22, r20
 126:	08 f0       	brcs	.+2      	; 0x12a <count_ms_from_tc_zero+0x36>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	58 2b       	or	r21, r24
 12c:	83 2f       	mov	r24, r19
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	53 0f       	add	r21, r19
 132:	31 e0       	ldi	r19, 0x01	; 1
 134:	58 17       	cp	r21, r24
 136:	08 f0       	brcs	.+2      	; 0x13a <count_ms_from_tc_zero+0x46>
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	43 2b       	or	r20, r19
 13c:	82 2f       	mov	r24, r18
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	42 0f       	add	r20, r18
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	48 17       	cp	r20, r24
 146:	08 f0       	brcs	.+2      	; 0x14a <count_ms_from_tc_zero+0x56>
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	32 2b       	or	r19, r18
 14c:	89 2f       	mov	r24, r25
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	39 0f       	add	r19, r25
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	38 17       	cp	r19, r24
 156:	08 f0       	brcs	.+2      	; 0x15a <count_ms_from_tc_zero+0x66>
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	29 2b       	or	r18, r25
 15c:	8b 2f       	mov	r24, r27
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	2b 0f       	add	r18, r27
 162:	b1 e0       	ldi	r27, 0x01	; 1
 164:	28 17       	cp	r18, r24
 166:	08 f0       	brcs	.+2      	; 0x16a <count_ms_from_tc_zero+0x76>
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	9b 2b       	or	r25, r27
 16c:	ba 2f       	mov	r27, r26
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	9a 0f       	add	r25, r26
 172:	a1 e0       	ldi	r26, 0x01	; 1
 174:	9b 17       	cp	r25, r27
 176:	08 f0       	brcs	.+2      	; 0x17a <count_ms_from_tc_zero+0x86>
 178:	a0 e0       	ldi	r26, 0x00	; 0
 17a:	8a 2b       	or	r24, r26
 17c:	81 0f       	add	r24, r17
 17e:	70 83       	st	Z, r23
 180:	61 83       	std	Z+1, r22	; 0x01
 182:	52 83       	std	Z+2, r21	; 0x02
 184:	43 83       	std	Z+3, r20	; 0x03
 186:	34 83       	std	Z+4, r19	; 0x04
 188:	25 83       	std	Z+5, r18	; 0x05
 18a:	96 83       	std	Z+6, r25	; 0x06
 18c:	87 83       	std	Z+7, r24	; 0x07
		TCNT0 = 0;
 18e:	12 be       	out	0x32, r1	; 50
	}
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
